7.3
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;
public class NumberTime {

	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		ArrayList<Integer> list=new ArrayList<>();
		while(true) {
			int m=input.nextInt();
			if(m==0)
				break;
			list.add(m);
		}
		Collections.sort(list);
		int max=Collections.max(list);
		int[] count=new int[101];
		for(int number:list) {
			count[number]++;
		}
		for(int i=0;i<=max;i++) {
			if(count[i]!=0)
				System.out.println(i+" occurs "+count[i]+" times");
		}
	}

}


7.5
import java.util.Scanner;
import java.util.ArrayList;

public class Number {

	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		ArrayList<Integer> number=new ArrayList<>();
		int[] array=new int[10];
		System.out.print("Enter ten numbers: ");
		for(int i=0;i<10;i++) {
			int temp=input.nextInt();
			if(!number.contains(temp))
			number.add(temp);
		}
		System.out.println("The number of distinct number is "+number.size());
		System.out.print("The distinct numbers are ");
		for(int i=0;i<number.size();i++) {
			System.out.print(number.get(i)+" ");
		}
	}

}


7.17
import java.util.Scanner;
import java.util.Collections;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
public class StudentSort {

	public static void main(String[] args) {
	Scanner input=new Scanner(System.in);
	ArrayList<Student> student=new ArrayList<Student>();
	System.out.print("Enter the number of students: ");
	int n=input.nextInt();
	for(int i=0;i<n;i++) {
		System.out.print("Enter the student's name: ");
		String name=input.next();
		System.out.print("Enter the student's score: ");
		int score=input.nextInt();
		Student s=new Student();
		s.setname(name);
		s.setscore(score);
		student.add(s);
	}
	Collections.sort(student,new ScoreComparator());
	for(int i=0;i<student.size();i++) {
		Student s=student.get(i);
		System.out.println(s.getname()+"\t"+s.getscore());
	}
	//myprint(student);
	}
	static class ScoreComparator implements Comparator{
		public int compare(Object object1,Object object2) {
			Student s1=(Student)object1;
			Student s2=(Student)object2;
			return new Integer(s2.getscore()).compareTo(new Integer(s1.getscore()));
		}
	}
	
	public  static void myprint(ArrayList<Student> student) {
		Iterator it=student.iterator();
		while(it.hasNext()) {
			System.out.println("\t"+it.next());
		}
	}
}


public class Student {
	private String name;
	private int score;

public Student(){
	}
public Student(String name,int score) {
	this.name=name;
	this.score=score;
}

public String getname() {
	return name;
}
public void setname(String name) {
	this.name=name;
}

public int getscore() {
	return score;
}
public void setscore(int score) {
	this.score=score;
}

public int compareTo(Object obj) {
	Student s=(Student)obj;
	return this.score-s.score;
}
}


7.18
import java.util.Scanner;

public class BubbleSort {

	public static void main(String[] args) {
		Scanner input=new Scanner(System.in);
		double[] num=new double[10];
		for(int i=0;i<10;i++) {
			num[i]=input.nextDouble();
		}
		for(int i=0;i<9;i++) {
			for(int j=0;j<9;j++) {
				if(num[j]<num[j+1]) {
					double temp=num[j];
					num[j]=num[j+1];
					num[j+1]=temp;
				}
			}
		}
		for(int i=0;i<9;i++) {
			System.out.print(num[i]+" ");
		}
	}

}


7.19import java.util.Scanner;

public class TextList {

	public static void main(String[] args) {
				Scanner input=new Scanner(System.in);
				int n=input.nextInt();
				int[] num=new int[n];
				int[] text=new int[n];
				for(int i=0;i<n;i++) {
					num[i]=input.nextInt();
					text[i]=num[i];
				}
				for(int i=0;i<n-1;i++) {
					for(int j=0;j<n-1;j++) {
						if(text[j]>text[j+1]) {
							int temp=text[j];
							text[j]=text[j+1];
							text[j+1]=temp;
						}
					}
				}
				int flag=1;
				for(int i=0;i<n;i++) {
					if(num[i]!=text[i]) {
					flag=0;
					break;
				}
				}
					if(flag==1)
						System.out.println("The list is already sorted ");
					else
					System.out.println("The list is not sorted ");
			}
}


7.23

public class OpenClose {

	public static void main(String[] args) {
		boolean[] box=new boolean[101];
		for(int s=1;s<=100;s++) {
			if(s==1) {
				for(int i=1;i<101;i++) {
					box[i]=!box[i];
				}
			}
			else {
				for(int j=s;j<101;j+=s) {
					box[j]=!box[j];
				}
			}
		}
		for(int i=1;i<101;i++) {
			if(box[i])
			System.out.print(1+" ");
			else
			System.out.print(0+" ");
			if(i%10==0)
			System.out.println();
		}
	}

}

7.24

public class pocks {
	public static void main(String[] args){
        boolean[] huase = new boolean[4];   //存放每种花色的抽取情况 
        boolean flag = false;
        int count = 0;
        //因为并不知道要抽多少次，所以要放在一个无限循环中 
        while(flag == false){       
            if(huase[0]&&huase[1]&&huase[2]&&huase[3])  //若四种花色都出现过 
                flag = true;
            else{
                switch(choosePai(huase)){
                    case "Spades":
                        huase[0] = true;
                        break;
                    case "Hearts":
                        huase[1] = true;
                        break;
                    case "Diammonds":
                        huase[2] = true;
                        break;
                    case "Clubs":
                        huase[3] = true;
                        break;
                }
            }
            count++;
        }
        System.out.println("Number of picks:"+count); 
    }
    
    public static String choosePai(boolean[] huase){
        int[] deck = new int[52];   //用来存放52张牌 
        String[] Huases = {"Spades","Hearts","Diamonds","Clubs"};
        String[] ranks = {"Ace","2","3","4","5","6","7","8","9","10","Jack","Queen","King"};
        
        //首先初始化牌组
        for(int i = 0;i < deck.length;i++){
            deck[i] = i;
        } 
        
        //进行洗牌
        for(int i = 0;i < deck.length;i++){
            int Index = (int)(Math.random()*deck.length);
            int temp = deck[i];
            deck[i] = deck[Index];
            deck[Index] = temp;
        }
        
        //从52张牌中任选一张进行抽牌
        int i = (int)(Math.random()*deck.length);
        String Huase = Huases[deck[i] / 13];
        String rank = ranks[deck[i]%13];
        switch(Huase){
        case "Spades":  
            if(!huase[0])  
                {System.out.println(rank+" of "+Huase);huase[0] = true;}  
            break;  
        case "Hearts":  
            if(!huase[1])  
                {System.out.println(rank+" of "+Huase);huase[1] = true;}  
            break;  
        case "Diamonds":  
            if(!huase[2])  
                {System.out.println(rank+" of "+Huase);huase[2] = true;}  
            break;  
        case "Clubs":  
            if(!huase[3])  
                {System.out.println(rank+" of "+Huase);huase[3] = true;}  
            break;  
        } 
        return Huase;
    }
}



